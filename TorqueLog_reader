import pandas as pd
import locale
import glob
import os
from inspect import currentframe, getframeinfo

_Replace = [('февр', 'фев'), ('нояб', 'ноя'), ('мая', 'май'), ('сент', 'сен'), ]
MonthReplace = (_Replace + [(s.capitalize(), r) for (s, r) in _Replace])  # для автозамены + capitalize


def read_one_file(file_name):
    lc_time = locale.getlocale(locale.LC_TIME)

    ret = dict()
    df = pd.read_csv(file_name, sep=',', error_bad_lines=False, low_memory=False)
    # Columns:
    #   'GPS Time' = Wed Feb 03 16:07:43 GMT+03:00 2021
    #   ' Device Time' = 03-февр.-2021 16:09:33.588
    #   ' Longitude' = 37.928150072693825
    #   ' Latitude' = 55.630347901023924
    #   'GPS Speed (Meters/second)' = 14.92
    #   ' Horizontal Dilution of Precision' = 1.0
    #   ' Altitude' = 149.0
    #   ' Bearing' = 210.0
    #   ' G(x)' = 1.43412685
    #   ' G(y)' = 8.08282471
    #   ' G(z)' = 3.67031121
    #   ' G(calibrated)' = -0.06436229
    #   ' Android device Battery Level(%)' = 92
    #   'CO₂ in g/km (Instantaneous)(g/km)' = 176.36810303
    #   'CO₂ in g/km (Average)(g/km)' = 203.76751709
    #   'Percentage of City driving(%)' = 85.65240479
    #   'Percentage of Highway driving(%)' = 0
    #   'Percentage of Idle driving(%)' = 14.34759426
    #   'Absolute Throttle Position B(%)' = 17.64705849
    #   'Barometric pressure (from vehicle)(psi)' = 14.21369839
    #   'Fuel trim bank 1 sensor 1(%)' = 4.6875
    #   'Fuel trim bank 2 sensor 1(%)' = 4.6875
    #   'Barometer (on Android device)(mb)' = 993.11181641
    #   'Trip time(whilst moving)(s)' = 835.00097656
    #   'Trip time(whilst stationary)(s)' = 81.74500275
    #   'Trip Time(Since journey start)(s)' = 917
    #   'Run time since engine start(s)' = 1033
    #   'Acceleration Sensor(X axis)(g)' = 0.18890031
    #   'Acceleration Sensor(Y axis)(g)' = 0.98062205
    #   'Acceleration Sensor(Z axis)(g)' = 0.30171824
    #   'Acceleration Sensor(Total)(g)' = 0.07678792
    #   'Fuel Trim Bank 1 Long Term(%)' = 0.78125
    #   'Fuel Trim Bank 2 Long Term(%)' = -3.125
    #   'Commanded Equivalence Ratio(lambda)' = 1.00048828
    #   'Fuel used (trip)(l)' = 0.78805441
    #   'Kilometers Per Litre(Instant)(kpl)' = 14.99672031
    #   'Kilometers Per Litre(Long Term Average)(kpl)' = 12.14073467
    #   'Fuel Trim Bank 1 Short Term(%)' = 2.34375
    #   'Fuel Trim Bank 2 Short Term(%)' = 5.46875
    #   'Torque(Nm)' = -
    #   'Litres Per 100 Kilometer(Instant)(l/100km)' = 6.66798592
    #   'Litres Per 100 Kilometer(Long Term Average)(l/100km)' = 8.23656273
    #   'Mass Air Flow Rate(g/s)' = 9.67000008
    #   'Miles Per Gallon(Instant)(mpg)' = 42.36361694
    #   'Miles Per Gallon(Long Term Average)(mpg)' = 34.29586029
    #   'Horsepower (At the wheels)(hp)' = -
    #   'Engine kW (At the wheels)(kW)' = -
    #   'Engine Load(%)' = 35.29411697
    #   'Voltage (OBD Adapter)(V)' = 14.69999981
    #   'Voltage (Control Module)(V)' = 14.85499954
    #   'O2 Volts Bank 1 sensor 1(V)' = 0.83999997
    #   'O2 Volts Bank 2 sensor 1(V)' = 0.84999996
    #   'O2 Volts Bank 1 sensor 2(V)' = -
    #   'O2 Volts Bank 2 sensor 2(V)' = -
    #   'Engine RPM(rpm)' = 1886
    #   'Volumetric Efficiency (Calculated)(%)' = 26
    #   'Fuel Remaining (Calculated from vehicle profile)(%)' = 0
    #   'Throttle Position(Manifold)(%)' = 17.25490189
    #   'Accelerator PedalPosition D(%)' = 27.84313774
    #   'Accelerator PedalPosition E(%)' = 28.23529434
    #   'Trip Distance(km)' = 9.24332905
    #   'Distance travelled with MIL/CEL lit(km)' = 0
    #   'GPS vs OBD Speed difference(km/h)' = 0.28800201
    #   'Distance to empty (Estimated)(km)' = 0
    #   'Fuel flow rate/minute(cc/min)' = 58.90074539
    #   'Fuel flow rate/hour(l/hr)' = 3.53404474
    #   'Speed (GPS)(km/h)' = 53.71199799
    #   'Speed (OBD)(km/h)' = 54
    #   'Air Fuel Ratio(Commanded)(:1)' = 14.70717716
    #   'Trip average Litres/100 KM(l/100km)' = 7.4883976
    #   'Trip average KPL(kpl)' = 13.35371399
    #   'Average trip speed(whilst stopped or moving)(km/h)' = 36.95640564
    #   'Intake Air Temperature(°C)' = -6
    #   'Catalyst Temperature (Bank 1 Sensor 1)(°C)' = 505.59997559
    #   'Catalyst Temperature (Bank 1 Sensor 2)(°C)' = 510.5
    #   'Catalyst Temperature (Bank 2 Sensor 1)(°C)' = 505.59997559
    #   'Catalyst Temperature (Bank 2 Sensor 2)(°C)' = 510.5
    #   'Ambient air temp(°C)' = -6
    #   'Engine Coolant Temperature(°C)' = 67
    #   'Timing Advance(°)' = 32.5
    #   'Fuel Level (From Engine ECU)(%)' = 63.52941132

    # print all column names and content example
    if 0:
        for col in df.columns:
            print(f"#   '{col}' = {df[col][1000]}")

    shape = df.shape
    if shape[0] < 100 or shape[1] < 30:
        raise EOFError('Too small file')

    # delete doubled headers
    df = df[df['GPS Time'] != 'GPS Time']

    # first and last rows might be wrong
    df = df.iloc[1:-2]

    # check if df too small
    if df.empty:
        raise EOFError('Too small file')

    # иногда PyCharm не показывает содержимое dataframe в виде таблицы из-за наличия в ней % - заменим их на #
    # df.columns = df.columns.str.replace('%', '#')

    # парсинг времени GPS
    if 0:
        # 'GPS Time' = Wed Feb 03 16:07:43 GMT+03:00 2021
        locale.setlocale(locale.LC_TIME, 'en-US')
        df['GPS Time'] = pd.to_datetime(df['GPS Time'], utc=False, errors='coerce', exact=False)

    # парсинг времени устройства
    if 0:
        # ' Device Time' = 03-февр.-2021 16:09:33.588

        for (s, r) in MonthReplace:
            df[' Device Time'] = df[' Device Time'].str.replace(s, r, 1)

        format = '%d-%b.-%Y %H:%M:%S.%f' # '03-фев.-2021 15:46:41.204'
        locale.setlocale(locale.LC_TIME, 'ru-RU')
        df[' Device Time'] = pd.to_datetime(df[' Device Time'], format=format, errors='coerce', exact=False)

    locale.setlocale(locale.LC_TIME, lc_time)

    # конвертируем в числа все столбцы, кроме первых двух - это время
    for col_name in list(df.loc[:, (df.columns != ' Device Time') & (df.columns != 'GPS Time')]):
        df[col_name] = pd.to_numeric(df[col_name], errors='coerce')

    # имена переменных, которые рассчитываются и возвращаются
    ret_var_names = {
        'engine_start_time': 'Engine start time',
        'engine_start_temperature': 'Engine start temperature, °C',
        'engine_stop_temperature': 'Engine stop temperature, °C',
        'engine_mean_temperature': 'Engine mean temperature, °C',
        'engine_max_temperature': 'Engine max temperature, °C',
        'warming_fuel_used': 'Engine warming fuel, l',
        'warming_duration': 'Engine warming duration, sec',
        'warming_finish_engine_temperature': 'Engine warming end temperature, °C',
        'trip_start_time': 'Trip start time',
        'trip_finish_time': 'Trip finish time',
        'trip_start_location_lat': 'Trip start location latitude, °',
        'trip_start_location_long': 'Trip start location longitude, °',
        'trip_start_location_alt': 'Trip start location altitude, m',
        'trip_finish_location_lat': 'Trip finish location latitude, °',
        'trip_finish_location_long': 'Trip finish location longitude, °',
        'trip_finish_location_alt': 'Trip finish location altitude, m',
        'trip_start_ambient_temperature': 'Trip start ambient temperature, °C',
        'trip_finish_ambient_temperature': 'Trip finish ambient temperature, °C',
        'trip_distance': 'Trip distance, km',
        'trip_duration': 'Trip duration, sec',
        'trip_percentage_highway_driving': 'Trip highway driving, %',
        'trip_percentage_city_driving': 'Trip city driving, %',
        'trip_percentage_idle_driving': 'Trip idle driving, %',
        'trip_fuel_consumption': 'Trip fuel consumption, l/100km',
        'trip_fuel_used': 'Trip fuel used, l',
        'trip_average_speed': 'Trip average speed, km/h',
        'trip_start_fuel_level': 'Trip start fuel level, %',
        'trip_finish_fuel_level': 'Trip finish fuel level, %',
        'fuel_capacity': 'Fuel tank capacity, l',
        'voltage_alternator': "Alternator's mean voltage, V"
    }

    # начальные значения возвращаемых переменных
    '''
    for var_name, description in ret_var_names.items():
        locals()[var_name] = 'none'
    '''
    engine_start_time = 'none'
    engine_start_temperature = 'none'
    engine_stop_temperature = 'none'
    engine_mean_temperature = 'none'
    engine_max_temperature = 'none'
    warming_fuel_used = 'none'
    warming_duration = 'none'
    warming_finish_engine_temperature = 'none'
    trip_start_time = 'none'
    trip_finish_time = 'none'
    trip_start_location_lat = 'none'
    trip_start_location_long = 'none'
    trip_start_location_alt = 'none'
    trip_finish_location_lat = 'none'
    trip_finish_location_long = 'none'
    trip_finish_location_alt = 'none'
    trip_start_ambient_temperature = 'none'
    trip_finish_ambient_temperature = 'none'
    trip_distance = 'none'
    trip_duration = 'none'
    trip_percentage_highway_driving = 'none'
    trip_percentage_city_driving = 'none'
    trip_percentage_idle_driving = 'none'
    trip_fuel_consumption = 'none'
    trip_fuel_used = 'none'
    trip_average_speed = 'none'
    trip_start_fuel_level = 'none'
    trip_finish_fuel_level = 'none'
    fuel_capacity = 'none'
    voltage_alternator = 'none'

    # данные, касающиеся работы двигателя (вне зависимости от поездки)
    if 1:
        df_engine_start = df[df['Engine RPM(rpm)'] > 0]

        try:
            engine_start_time = df_engine_start[' Device Time'].iloc[0]
        except KeyError:
            pass

        try:
            engine_temperatures = df_engine_start[df_engine_start['Engine Coolant Temperature(°C)'].notnull()]['Engine Coolant Temperature(°C)']
            engine_start_temperature = engine_temperatures.iloc[0]
            engine_stop_temperature = engine_temperatures.iloc[-1]
            engine_mean_temperature = engine_temperatures.median()
            engine_max_temperature = engine_temperatures.max()
        except KeyError:
            pass

        try:
            voltage_alternator = df_engine_start['Voltage (Control Module)(V)'].median(skipna=True)
        except KeyError:
            pass

        del df_engine_start

    # поездка определяется появлением и окончанием скорости
    trip_idx = df.query('`Speed (OBD)(km/h)` > 0 and `Trip Time(Since journey start)(s)` > 0').index
    trip_start_idx = trip_idx[0]
    trip_finish_idx = trip_idx[-1]
    df_trip = df.iloc[trip_start_idx:trip_finish_idx]

    idx = df.query('`Engine RPM(rpm)` > 0').index
    df_warming = df.iloc[idx[0]:trip_start_idx]

    # row_when_trip_finish = df[df['Speed (OBD)(km/h)'] > 0].iloc[-1]
    # row_when_trip_start = df[df['Trip Time(Since journey start)(s)'] > 0].iloc[0]

    # прогрев был?
    if not df_warming.empty:
        try:
            # warming_fuel_used = row_when_trip_start['Fuel used (trip)(l)']
            col = 'Fuel used (trip)(l)'
            warming_fuel_used = df_warming[df_warming[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # warming_duration = row_when_trip_start['Run time since engine start(s)']
            col = 'Run time since engine start(s)'
            warming_duration = df_warming[df_warming[col].notnull()][col].iloc[-1] - df_warming[df_warming[col].notnull()][col].iloc[0]
            # ToDo: расчет времени прогрева сделать на основе разницы глобального таймера/часов
            #  (бывает что таймер не с нуля начинается - как в trackLog-2020-нояб.-21_12-48-18.csv)
        except KeyError:
            pass

        try:
            # warming_finish_engine_temperature = row_when_trip_start['Engine Coolant Temperature(°C)']
            col = 'Engine Coolant Temperature(°C)'
            warming_finish_engine_temperature = df_warming[df_warming[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

    # поездка состоялась?
    if not df_trip.empty:
        try:
            # trip_start_time = row_when_trip_start[' Device Time']
            col = ' Device Time'
            trip_start_time = df_trip[df_trip[col].notnull()][col].iloc[0]
            trip_finish_time = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            col = ' Latitude'
            trip_start_location_lat = df_trip[df_trip[col].notnull()][col].iloc[0]
            trip_finish_location_lat = df_trip[df_trip[col].notnull()][col].iloc[-1]

            col = ' Longitude'
            trip_start_location_long = df_trip[df_trip[col].notnull()][col].iloc[0]
            trip_finish_location_long = df_trip[df_trip[col].notnull()][col].iloc[-1]

            col = ' Altitude'
            trip_start_location_alt = df_trip[df_trip[col].notnull()][col].iloc[0]
            trip_finish_location_alt = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_start_fuel_level = row_when_trip_start['Fuel Level (From Engine ECU)(%)']
            col = 'Fuel Level (From Engine ECU)(%)'
            trip_start_fuel_level = df_trip[df_trip[col].notnull()][col].iloc[0]
        except KeyError:
            pass

        try:
            # trip_start_ambient_temperature = df_trip[df_trip['Ambient air temp(°C)'].notnull()]['Ambient air temp(°C)'].iloc[0]
            col = 'Ambient air temp(°C)'
            trip_start_ambient_temperature = df_trip[df_trip[col].notnull()][col].iloc[0]
            trip_finish_ambient_temperature = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_distance = (row_when_trip_finish['Trip Distance(km)'])
            col = 'Trip Distance(km)'
            trip_distance = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_duration = (row_when_trip_finish['Trip Time(Since journey start)(s)'])
            col = 'Trip Time(Since journey start)(s)'
            trip_duration = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_percentage_idle_driving = (row_when_trip_finish['Percentage of Idle driving(%)'])
            col = 'Percentage of Idle driving(%)'
            trip_percentage_idle_driving = df_trip[df_trip[col].notnull()][col].iloc[-1]

            col = 'Percentage of Highway driving(%)'
            trip_percentage_highway_driving = df_trip[df_trip[col].notnull()][col].iloc[-1]

            col = 'Percentage of City driving(%)'
            trip_percentage_city_driving = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_fuel_consumption = (row_when_trip_finish['Trip average Litres/100 KM(l/100km)'])
            col = 'Trip average Litres/100 KM(l/100km)'
            trip_fuel_consumption = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_fuel_used = (row_when_trip_finish['Fuel used (trip)(l)'])
            col = 'Fuel used (trip)(l)'
            trip_fuel_used = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_average_speed = (row_when_trip_finish['Average trip speed(whilst stopped or moving)(km/h)'])
            col = 'Average trip speed(whilst stopped or moving)(km/h)'
            trip_average_speed = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        try:
            # trip_finish_fuel_level = (row_when_trip_finish['Fuel Level (From Engine ECU)(%)'])
            col = 'Fuel Level (From Engine ECU)(%)'
            trip_finish_fuel_level = df_trip[df_trip[col].notnull()][col].iloc[-1]
        except KeyError:
            pass

        if (type(trip_fuel_used) != str) and (trip_start_fuel_level - trip_finish_fuel_level) > 0:
            fuel_capacity = 100*trip_fuel_used/(trip_start_fuel_level - trip_finish_fuel_level)
        else:
            fuel_capacity = 0.0

    # упакуем значения возвращаемых переменных
    for var_name, description in ret_var_names.items():
        try:
            ret[description] = locals()[var_name]
        except:
            ret[description] = 'none'

    return ret


if __name__ == '__main__':

    # ' Device Time' = 03-февр.-2021 16:09:33.588
    date_format = '%d-%b.-%Y %H:%M:%S.sss'
    date_str = u'03-февр.-2021 16:09:33.588'

    date_format = '%d-%b.-%Y %H:%M:%S.%f'
    date_str = u'03-фев.-2021 15:46:41.20'

    for (s, r) in MonthReplace:
        if s in date_str:
            date_str = date_str.replace(s, r, 1)  # 'правильные' имена месяцев

    loc = locale.getlocale(locale.LC_TIME)
    locale.setlocale(locale.LC_TIME, "ru-RU")
    out = pd.to_datetime(date_str, format=date_format, errors='coerce', exact=False)
    locale.setlocale(locale.LC_TIME, loc)
    print(out)

    files_template = r'C:\Users\AcerSTE\PycharmProjects\TorqueLogReader\torqueLogs\nan\*.csv'
    b_print_header = True
    for file_path in glob.glob(files_template):
        file_name = os.path.split(file_path)[1]

        try:
            file_summary = read_one_file(file_path)
        except Exception as e:
            print(file_name, e)
        else:
            if b_print_header:
                print('File name', end='\t')
                print('\t'.join(list(file_summary.keys())))
                b_print_header = False
            print(file_name, end='\t')
            print('\t'.join(map(str, list(file_summary.values()))))
